package ccc.study.suixianglu.greed;

/**
 * @author c
 * @date 2023/2/21 20:03
 */
public class T376_摆动序列 {
    /*
    难度：medium
    --------------------------------------------------------------------------------
    题目：
        如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。
        仅有一个元素或者含两个不等元素的序列也视作摆动序列。

        例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。

        相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。
        子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。

        给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。

        链接：https://leetcode.cn/problems/wiggle-subsequence
    --------------------------------------------------------------------------------
    解题思路：

    --------------------------------------------------------------------------------
     */

    public int wiggleMaxLength(int[] nums) {
        // 临界
        if(nums.length <= 1){
            return nums.length;
        }
        int count = 1;
        // 当前差值
        int curDiff = 0;
        // 上一个差值
        int preDiff = 0;
        for(int i = 1; i < nums.length; i++){
            // 得到当前差值
            curDiff = nums[i] - nums[i - 1];
            // 如果当前差值和上一个差值为一正一负
            // 等于0的情况表示初始时的preDiff
            if((curDiff > 0 && preDiff <= 0) || (curDiff < 0 && preDiff >= 0)){
                count++;
                preDiff = curDiff;
            }
        }
        return count;
    }

}
