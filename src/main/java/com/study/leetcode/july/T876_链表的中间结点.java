package com.study.leetcode.july;
/**
 * @author c
 * 2022/7/29
 */
public class T876_链表的中间结点 {
     /*
    --------------------------------------------------------------------------------
    题目：
        给定一个头结点为 head 的非空单链表，返回链表的中间结点。
        如果有两个中间结点，则返回第二个中间结点。

    --------------------------------------------------------------------------------
    解题思路：
        快慢指针：
            快慢指针十分的好用，本题让求中间位置，所以快指针走两步，慢指针走一步。

        既然要快指针走两步，说明链表的长度至少为3，所以当长度小于3的时候需要我们自己判断,base case:
        长度为1直接返回 return head;
        长度为2 返回第二个节点 return head.next;
        下面我们要做的就是让指针动起来，然后找到停止条件
        快指针一定在前面，所以条件判断的时候，我们只需要判断快指针的位置即可，打个比方就很清楚了：
        假设长度为奇数的链表为[1,2,3,4,5],当快指针走到5的位置的时候停止，此时慢指针正好在中点3的位置。也就是说 fast.next != null
        假设长度为偶数的链表为[1,2,3,4,5,6],当快指针走到5的位置的时候不能停止，因为此时后面还有一个6，还要继续往前走，当快指针停在了6的后面的位置的时候，也就是为空，此时慢指针正好在中点3的位置。也就是说 fast != null

    --------------------------------------------------------------------------------
     */

    /*
    --------------------------------------------------------------------------------
        public ListNode middleNode(ListNode head) {
            if(head.next == null){
                return head;
            }
            if(head.next.next == null){
                return head.next;
            }
            // 定义快慢双指针
            ListNode fast = head, slow = head;
            // 快指针每次走两步，慢指针一步
            while(fast != null && fast.next != null){
                slow = slow.next;
                fast = fast.next.next;
            }
            return slow;
        }
     --------------------------------------------------------------------------------
     */


}
