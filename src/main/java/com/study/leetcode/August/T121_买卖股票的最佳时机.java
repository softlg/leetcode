package com.study.leetcode.August;
/**
 * @author c
 * 2022/8/1
 */
public class T121_买卖股票的最佳时机 {
    /*
    难度：简单
    --------------------------------------------------------------------------------
    题目：
        给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

        你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

        返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

    --------------------------------------------------------------------------------
    解题思路：
        先考虑最简单的「暴力遍历」，即枚举出所有情况，并从中选择最大利润。设数组 prices 的长度为 n ，由于只能先买入后卖出，
        因此第 1 天买可在未来 n - 1天卖出，第 2 天买可在未来 n - 2天卖出……以此类推，
        共有 n(n-1)/2 种情况，时间复杂度为 O(N^2)。
        考虑到题目给定的长度范围 1≤prices.length≤10^5，需要思考更优解法。

        然而，暴力法会产生许多冗余计算。例如，若第 1 天价格低于第 2 天价格，即第 1 天成本更低，那么我们一定不会选择在第 2 天买入。
        进一步的，若在前 ii 天选择买入，若想达到最高利润，则一定选择价格最低的交易日买入。考虑根据此贪心思想，遍历价格列表 prices 并执行两步：

        由于初始值 i = 0 ，为了序号对应，本文设从第 0 天开始；

        1、更新前 i 天的最低价格，即最低买入成本 cost；
        2、更新前 i 天的最高利润 profit ，即选择「前 i-1天最高利润 profit 」和「第 i天卖出的最高利润 price - cost 」中的最大值 ；

    --------------------------------------------------------------------------------
     */

    public int maxProfit(int[] prices) {
        // 初始化最低成本cost，最高利润
        int cost = Integer.MAX_VALUE, profit = 0;
        for(int i = 0;i < prices.length;i++){
            cost = Math.min(cost,prices[i]);
            profit = Math.max(profit,prices[i] - cost);
        }
        return profit;
    }

}
